package com.codebreeze.algorithms;



import org.junit.jupiter.api.Test;

import java.math.BigInteger;

import static org.assertj.core.api.Assertions.assertThat;

public class ReciprocalCyclesTest
{
    @Test
    public void caluclate()
    {
        assertThat(ReciprocalCycles.calculate(bi(10)))
                .isEqualTo(arrayOf(bi(7), bi(6), bi(142857)));
        assertThat(ReciprocalCycles.calculate(bi(20)))
                .isEqualTo(arrayOf(bi(19), bi(18), bi(52631578947368421L)));
        assertThat(ReciprocalCycles.calculate(bi(24)))
                .isEqualTo(arrayOf(bi(23), bi(22), bi("434782608695652173913")));
        assertThat(ReciprocalCycles.calculate(bi(30)))
                .isEqualTo(arrayOf(bi(29), bi(28), bi("344827586206896551724137931")));
        assertThat(ReciprocalCycles.calculate(bi(47)))
                .isEqualTo(arrayOf(bi(29), bi(28), bi("344827586206896551724137931")));
        assertThat(ReciprocalCycles.calculate(bi(60)))
                .isEqualTo(arrayOf(bi(59), bi(58), bi("169491525423728813559322033898305084745762711864406779661")));
        assertThat(ReciprocalCycles.calculate(bi(100)))
                .isEqualTo(arrayOf(bi(97), bi(96), bi("10309278350515463917525773195876288659793814432989690721649484536082474226804123711340206185567")));
        assertThat(ReciprocalCycles.calculate(bi(1000)))
                .isEqualTo(arrayOf(bi(983), bi(982), bi("10172939979654120040691759918616480162767039674465920651068158697863682604272634791454730417090539165818921668362156663275686673448626653102746693794506612410986775178026449643947100712105798575788402848423194303153611393692777212614445574771108850457782299084435401831129196337741607324516785350966429298067141403865717192268565615462868769074262461851475076297049847405900305188199389623601220752797558494404883011190233977619532044760935910478128179043743641912512716174974567650050864699898270600203458799593082400813835198372329603255340793489318413021363173957273652085452695829094608341810783316378433367243133265513733468972533062054933875890132248219735503560528992878942014242115971515768056968463886063072227873855544252288911495422177009155645981688708036622583926754832146490335707019328585961342828077314343845371312309257375381485249237029501525940996948118006103763987792472024415055951169888097660223804679552390640895218718209562563580874872838250254323499491353")));
    }


    private static <T> T[] arrayOf(final T ... ts)
    {
        return ts;
    }

    private static BigInteger bi(final long bigInteger)
    {
        return BigInteger.valueOf(bigInteger);
    }

    private static BigInteger bi(final String bigInteger)
    {
        return new BigInteger(bigInteger, 10);
    }
}
